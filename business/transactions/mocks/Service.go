// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	transactions "yukevent/business/transactions"

	mock "github.com/stretchr/testify/mock"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// GetAllTrans provides a mock function with given fields:
func (_m *Service) GetAllTrans() ([]transactions.Domain, error) {
	ret := _m.Called()

	var r0 []transactions.Domain
	if rf, ok := ret.Get(0).(func() []transactions.Domain); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transactions.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllUserTrans provides a mock function with given fields: userID
func (_m *Service) GetAllUserTrans(userID int) ([]transactions.Domain, error) {
	ret := _m.Called(userID)

	var r0 []transactions.Domain
	if rf, ok := ret.Get(0).(func(int) []transactions.Domain); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]transactions.Domain)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransByID provides a mock function with given fields: id
func (_m *Service) GetTransByID(id int) (transactions.Domain, error) {
	ret := _m.Called(id)

	var r0 transactions.Domain
	if rf, ok := ret.Get(0).(func(int) transactions.Domain); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(transactions.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Trans provides a mock function with given fields: userID, domain
func (_m *Service) Trans(userID int, domain *transactions.Domain) (transactions.Domain, error) {
	ret := _m.Called(userID, domain)

	var r0 transactions.Domain
	if rf, ok := ret.Get(0).(func(int, *transactions.Domain) transactions.Domain); ok {
		r0 = rf(userID, domain)
	} else {
		r0 = ret.Get(0).(transactions.Domain)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, *transactions.Domain) error); ok {
		r1 = rf(userID, domain)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
